shiny::runApp('E:/GitHub/Demo/IDmapApp/IDmap')
runApp('E:/GitHub/Demo/IDmapApp/IDmap')
testAnno <- read.csv("C:\\Users\\Administrator\\Desktop\\代码数据\\test\\probeAnnotations.csv")
?order
sort(testAnno$id.1)
?count
??count
counts(testAnno)
library(shiny)
library(shinydashboard)
library(shinyFiles)
library(DT)
library(Rbowtie)
library(data.table)
library(Rsamtools)
#library(refGenome)
library(GenomicRanges)
library(tidyverse)
library(Sushi)
#library(igvR)
library(openxlsx)
#library(GEOmetadb)
library(GEOquery)
library(RSQLite)
?count
?%>%
mtcars %>% tally()
mtcars
mtcars %>% count(cyl)
testAnno %>% count(id.1)
df <- read.csv("data/sampledata/sampleAnno.csv",stringsAsFactors = F)
setwd("E:/GitHub/Demo/IDmapApp/IDmap/")
df <- read.csv("data/sampledata/sampleAnno.csv",stringsAsFactors = F)
df %>% dplyr::count(df$id.1)
df %>% dplyr::count(df$id.1,sort = T)
df %>% dplyr::count(df$id.1,sort = F)
df %>% dplyr::count(df$id.1)
num = df %>% dplyr::count(df$id.1)
num
?tibble
num$`df$id.1`
duplicated(num$`df$id.1`)
genes=df[!duplicated(df[,12]),12]
nrow(df)
tail(num)
View(num)
View(df)
df <- df[order(df$id.1),]
View(df)
df <- read.csv("data/sampledata/sampleAnno.csv",stringsAsFactors = F)
df <- read.csv("data/sampledata/sampleAnno.csv",stringsAsFactors = F)
df <- df[order(df$id.1),]
df <- read.table("data/sampledata/samplebed.anno",stringsAsFactors = F,sep="/t")
df <- read.table("data/sampledata/samplebed.anno",stringsAsFactors = F,sep="\t")
df <- df[order(df$id.1),]
View(df)
df <- df[order(df$V7),]
num = df %>% dplyr::count(df$V7)
View(num)
genePerProbeNum = df %>% dplyr::count(df$V7)
View(genePerProbeNum)
df <- read.table("data/sampledata/samplebed.anno",stringsAsFactors = F,sep="\t")
df <- df[order(df$V7),]
genePerProbeNum = df %>% dplyr::count(df$V7)
colnames(genePerProbeNum) <- c("gene_symbol","probe_num")
p <- ggplot(genePerProbeNum
, aes(x = gene_symbol, y = probe_num)) +
geom_bar(stat = "identity",fill = "lightblue", colour = "black")
p <- p + theme(axis.text.x = element_text(size = 10, color = "black", vjust = 0.5, hjust = 0.5, angle = 90),panel.grid =element_blank(),panel.border = element_blank())
p
tmp <- genePerProbeNum[order(genePerProbeNum$probe_num),]
View(tmp)
tmp <- genePerProbeNum[order(genePerProbeNum$probe_num,decreasing = T),]
p <- ggplot(head(genePerProbeNum), aes(x = gene_symbol, y = probe_num)) +
geom_bar(stat = "identity",fill = "lightblue", colour = "black")
p <- p + theme(axis.text.x = element_text(size = 10, color = "black", vjust = 0.5, hjust = 0.5, angle = 90),panel.grid =element_blank(),panel.border = element_blank())
p
p <- ggplot(head(tmp,n=20), aes(x = gene_symbol, y = probe_num)) +
geom_bar(stat = "identity",fill = "lightblue", colour = "black")
p <- p + theme(axis.text.x = element_text(size = 10, color = "black", vjust = 0.5, hjust = 0.5, angle = 90),panel.grid =element_blank(),panel.border = element_blank())
p
genePerProbeNum = df %>% dplyr::count(df[,12])
df[,12]
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
zz="human"
paste0("/genome_index/",zz,"/")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getBowtieAlign <- function(probeSeq, indexDir){
readsFiles <- probeSeq
## use tempfile to save sam files created by bowtie
samFile <- tempfile()
## align probe sequences to genome
Rbowtie::bowtie(sequences = readsFiles, index = file.path(indexDir, "index"), outfile = samFile,
type = "single", S = TRUE, f = TRUE, n = 0, force = TRUE)
return(samFile)
}
probeseq <- "C:/Users/Administrator/Desktop/IDmap测试数据/probeseq_test.fa"
indexDir="E:/GitHub/Demo/IDmapApp/IDmap/genome_index/human"
samFile = getBowtieAlign(probeseq ,indexDir)
getwd
getwd()
convertBamToGR <- function(samFile){
bamtemp <- tempdir()
bamFile <- Rsamtools::asBam(file = samFile, destination = bamtemp, overwrite = T)
bam <- scanBam(bamFile)
# names(bam[[1]])
tmp = as.data.frame(do.call(cbind, lapply(bam[[1]], as.character)), stringsAsFactors = F)
tmp = tmp[tmp$flag != 4, ]
tmp$end = as.numeric(tmp$pos) + as.numeric(tmp$qwidth)
# create .bam GRanges Objects
Bam2GR <- with(tmp, GRanges(as.character(rname), IRanges(as.numeric(pos), end), as.character(strand),
id = as.character(qname)))
return(Bam2GR)
}
Bam2GR = convertBamToGR(samFile)
gtf <- data.table::fread("E:/GitHub/Demo/IDmapApp/IDmap/gtf/gencode_human_v30.gtf",
sep = "\t",header = F)
processStoredGTF <- function(gtf){
gtf2GR <- with(gtf, GRanges(V1, IRanges(V2, V3), V4, id = V7))
return(gtf2GR)
}
gtf2GR = processStoredGTF(gtf)
gtf2GR
getAnnotation <- function(Bam2GR,gtf2GR){
gr3 = intersect(Bam2GR, gtf2GR)
o = findOverlaps(Bam2GR, gtf2GR)
lo = cbind(as.data.frame(Bam2GR[queryHits(o)]), as.data.frame(gtf2GR[subjectHits(o)]))
# head(lo)
colnames(lo) <- c("probe_chr", "probe_start" ,"probe_end","probe_width","probe_strand"
,"probe_id" ,"gencode_chr","gencode_start" ,"gencode_end"
,"gencode_width","gencode_strand","gene_name")
return(lo)
}
annoRes = getAnnotation(Bam2GR,gtf2GR)
View(annoRes)
shiny::runApp()
runApp()
paste0("select * from ","human_all_anno"," where gpl = ",shQuote(10332),
" and ","biotype = ",shQuote(protein_coding))
paste0("select * from ","human_all_anno"," where gpl = ",shQuote("10332"),
" and ","biotype = ",shQuote("protein_coding"))
shiny::runApp()
runApp()
1&2
1 && 2
runApp()
runApp()
runApp()
