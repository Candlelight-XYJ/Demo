# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
?pageWithSidebar
pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
runApp()
shiny::runGist("c4db11d81f3c46a7c4a5")
library(shiny)
shiny::runGist("c4db11d81f3c46a7c4a5")
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
runApp('E:/GitHub/Demo/Rscripts/shinyApp_Test/storageData_shinyApp.R')
?exists
runApp('E:/GitHub/Demo/Rscripts/shinyApp_Test/storageData_shinyApp.R')
runApp()
library(knitr)
install.pacakges("formatR")
install.packages("formatR")
library(formatR)
formatR::tidy_dir("R")
formatR::tidy_dir("R")
install.packages("dbplyr")
?tags
runApp()
runApp()
runApp()
?updateSelectizeInput
formatR::tidy_dir("E:\\GitHub\\Demo\\IDmapApp\\IDmap\\")
formatR::tidy_dir("E:\\GitHub\\Demo\\IDmapApp\\IDmap\\")
formatR::tidy_dir("E:\\GitHub\\Demo\\IDmapApp\\IDmap\\")
formatR::tidy_dir("E:\\GitHub\\Demo\\IDmapApp\\IDmap\\")
formatR::tidy_dir("E:\\GitHub\\Demo\\IDmapApp\\IDmap\\")
formatR::tidy_dir("E:\\GitHub\\Demo\\IDmapApp\\IDmap\\")
shiny::runApp('C:/Users/Administrator/Desktop/TF_map-master/TF_map-master')
install.pc
install.packages("shinyBS")
runApp()
?icon
runApp()
runApp()
?observeEvent
?runif
u <- runif(20)
u
?eventReactive
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
gplname = read.xlsx("data\\gpl_list.xlsx")
as.vector(gplname[,1])
runApp()
runApp()
runApp()
install.packages("RMySQL")
library(RMySQL)
?dbSendQuery
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(con, "mtcars", mtcars)
rs <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
dbFetch(rs)
dbClearResult(rs)
# Pass one set of values with the param argument:
rs <- dbSendQuery(
con,
"SELECT * FROM mtcars WHERE cyl = ?",
param = list(4L)
)
dbFetch(rs)
dbClearResult(rs)
# Pass multiple sets of values with dbBind():
rs <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = ?")
dbBind(rs, list(6L))
dbFetch(rs)
dbBind(rs, list(8L))
dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
?dbGetQuery
host <<- "127.0.0.1"
port <<- 3306
user <<- "idmapuser"
password <<-  'idmap123'
library(RMySQL)
db <- dbConnect(RMySQL::MySQL(), host=host, port=port, user=user, password=password)
host <<- "localhost"
port <<- 3306
user <<- "idmapuser"
password <<-  'idmap123'
library(RMySQL)
db <- dbConnect(RMySQL::MySQL(), host=host, port=port, user=user, password=password)
?dbConnect
host <<- "localhost"
port <<- 3306
user <<- "idmapuser"
password <<-  'idmap123'
library(RMySQL)
db <- dbConnect(RMySQL::MySQL(), host=host,dbname="idmapDB",port=port, user=user, password=password)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
withProgress(message = 'Making plot', value = 0, {
# Number of times we'll go through the loop
n <- 10
for (i in 1:n) {
# Each time through the loop, add another row of data. This is
# a stand-in for a long-running computation.
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
# Increment the progress bar, and update the detail text.
incProgress(1/n, detail = paste("Doing part", i))
# Pause for 0.1 seconds to simulate a long computation.
Sys.sleep(0.1)
}
})
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
# This function computes a new data set. It can optionally take a function,
# updateProgress, which will be called as each row of data is added.
compute_data <- function(updateProgress = NULL) {
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
for (i in 1:10) {
Sys.sleep(0.25)
# Compute new row of data
new_row <- data.frame(x = rnorm(1), y = rnorm(1))
# If we were passed a progress update function, call it
if (is.function(updateProgress)) {
text <- paste0("x:", round(new_row$x, 2), " y:", round(new_row$y, 2))
updateProgress(detail = text)
}
# Add the new row of data
dat <- rbind(dat, new_row)
}
dat
}
server <- function(input, output) {
output$table <- renderTable({
input$goTable
# Create a Progress object
progress <- shiny::Progress$new()
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a callback function to update progress.
# Each time this is called:
# - If `value` is NULL, it will move the progress bar 1/5 of the remaining
#   distance. If non-NULL, it will set the progress to that value.
# - It also accepts optional detail text.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
# Compute the new data, and pass in the updateProgress function so
# that it can update the progress indicator.
compute_data(updateProgress)
})
}
ui <- shinyUI(basicPage(
tableOutput('table'),
actionButton('goTable', 'Go table')
))
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
withProgress(message = 'In Progress',
detail = 'This may take a while...',
value = 0,
{
## build genome index
if(F){
## if the genome index we have, then use the exist index
}else{
## if input genome we don`t have index,then build index by Rbowtie
## it may take long times ---
setProgress(value = .1, detail = "Building index ...")
react_Values$bowtieIndex = getBowtieIndex(loadUsrGenome())}
## align reads
setProgress(value = 0.2, detail = "Aligning reads ...")
react_Values$samFile = getBowtieAlign(loadProbeSeq(),react_Values$bowtieIndex)
## preprocess gtf files
react_Values$gtf2GR = preprocessGTF(loadUsrGTF())
## Bam2Ranges
Bam2Ranges = convertBamToGR(react_Values$samFile)
## get Annotation
react_Values$annoRes = getAnnotation(Bam2Ranges,react_Values$gtf2GR)
setProgress(value = 1, detail = "Done! ...")
Sys.sleep(0.5)
}
)
runApp()
## Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
withProgress(message = 'Calculation in progress',
detail = 'This may take a while...', value = 0, {
for (i in 1:15) {
incProgress(1/15)
Sys.sleep(0.25)
}
})
plot(cars)
})
}
shinyApp(ui, server)
}
devtools::install_github("mathelab/ALTRE")
devtools::install_github("mathelab/ALTRE")
runApp()
infoBox(
"Progress", icon = icon("list"),
color = "purple"
)
runApp()
runApp()
runApp()
body <- dashboardBody(
fluidRow(
column(width = 4,
box(
title = "Box title", width = NULL, status = "primary",
"Box content"
),
box(
title = "Title 1", width = NULL, solidHeader = TRUE, status = "primary",
"Box content"
),
box(
width = NULL, background = "black",
"A box with a solid black background"
)
),
column(width = 4,
box(
status = "warning", width = NULL,
"Box content"
),
box(
title = "Title 3", width = NULL, solidHeader = TRUE, status = "warning",
"Box content"
),
box(
title = "Title 5", width = NULL, background = "light-blue",
"A box with a solid light-blue background"
)
),
column(width = 4,
box(
title = "Title 2", width = NULL, solidHeader = TRUE,
"Box content"
),
box(
title = "Title 6", width = NULL, background = "maroon",
"A box with a solid maroon background"
)
)
)
)
# We'll save it in a variable `ui` so that we can preview it in the console
ui <- dashboardPage(
dashboardHeader(title = "Column layout"),
dashboardSidebar(),
body
)
# Preview the UI in the console
shinyApp(ui = ui, server = function(input, output) { })
runApp()
runApp()
runApp()
body <- dashboardBody(
fluidRow(
box(title = "Box title", "Box content"),
box(status = "warning", "Box content")
),
fluidRow(
box(
title = "Title 1", width = 4, solidHeader = TRUE, status = "primary",
"Box content"
),
box(
title = "Title 2", width = 4, solidHeader = TRUE,
"Box content"
),
box(
title = "Title 1", width = 4, solidHeader = TRUE, status = "warning",
"Box content"
)
),
fluidRow(
box(
width = 4, background = "black",
"A box with a solid black background"
),
box(
title = "Title 5", width = 4, background = "light-blue",
"A box with a solid light-blue background"
),
box(
title = "Title 6",width = 4, background = "maroon",
"A box with a solid maroon background"
)
)
)
# We'll save it in a variable `ui` so that we can preview it in the console
ui <- dashboardPage(
dashboardHeader(title = "Row layout"),
dashboardSidebar(),
body
)
# Preview the UI in the console
shinyApp(ui = ui, server = function(input, output) { })
runApp()
?box
## Only run this example in interactive R sessions
if (interactive()) {
library(shiny)
# A dashboard body with a row of infoBoxes and valueBoxes, and two rows of boxes
body <- dashboardBody(
# infoBoxes
fluidRow(
infoBox(
"Orders", uiOutput("orderNum2"), "Subtitle", icon = icon("credit-card")
),
infoBox(
"Approval Rating", "60%", icon = icon("line-chart"), color = "green",
fill = TRUE
),
infoBox(
"Progress", uiOutput("progress2"), icon = icon("users"), color = "purple"
)
),
# valueBoxes
fluidRow(
valueBox(
uiOutput("orderNum"), "New Orders", icon = icon("credit-card"),
href = "http://google.com"
),
valueBox(
tagList("60", tags$sup(style="font-size: 20px", "%")),
"Approval Rating", icon = icon("line-chart"), color = "green"
),
valueBox(
htmlOutput("progress"), "Progress", icon = icon("users"), color = "purple"
)
),
# Boxes
fluidRow(
box(status = "primary",
sliderInput("orders", "Orders", min = 1, max = 2000, value = 650),
selectInput("progress", "Progress",
choices = c("0%" = 0, "20%" = 20, "40%" = 40, "60%" = 60, "80%" = 80,
"100%" = 100)
)
),
box(title = "Histogram box title",
status = "warning", solidHeader = TRUE, collapsible = TRUE,
plotOutput("plot", height = 250)
)
),
# Boxes with solid color, using `background`
fluidRow(
# Box with textOutput
box(
title = "Status summary",
background = "green",
width = 4,
textOutput("status")
),
# Box with HTML output, when finer control over appearance is needed
box(
title = "Status summary 2",
width = 4,
background = "red",
uiOutput("status2")
),
box(
width = 4,
background = "light-blue",
p("This is content. The background color is set to light-blue")
)
)
)
server <- function(input, output) {
output$orderNum <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$orderNum2 <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$progress <- renderUI({
tagList(input$progress, tags$sup(style="font-size: 20px", "%"))
})
output$progress2 <- renderUI({
paste0(input$progress, "%")
})
output$status <- renderText({
paste0("There are ", input$orders,
" orders, and so the current progress is ", input$progress, "%.")
})
output$status2 <- renderUI({
iconName <- switch(input$progress,
"100" = "ok",
"0" = "remove",
"road"
)
p("Current status is: ", icon(iconName, lib = "glyphicon"))
})
output$plot <- renderPlot({
hist(rnorm(input$orders))
})
}
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body
),
server = server
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?setProgress
infoBox(
"Progress", paste0(progress$getValue()),icon = icon("list"),
color = "light-blue"
)
runApp('C:/Users/Administrator/Desktop/TF_map-master/TF_map-master')
runApp()
runApp('C:/Users/Administrator/Desktop/TF_map-master/TF_map-master')
runApp()
runApp()
runApp()
runApp()
