shiny::runApp('E:/GitHub/Demo/IDmapApp/IDmap')
runApp('E:/GitHub/Demo/IDmapApp/IDmap')
setwd("E:\\GitHub\\Demo\\IDmapApp\\IDmap\\")
library(RSQLite)
setwd("E:/GitHub/Demo/IDmapApp/IDmap/")
library(RSQLite)
sqlitePath <- "/data/idmap.sqlite"
allfiles = list.files(getwd())
for(i in 1:length(allfiles)){
print(i)
eval(parse(text = paste0("load(","\'",allfiles[i],"\'",")")))
}
allfiles
loadDataPath <- "E:/学习资料存放处/IDmap/注释存放处/8_MySQL_table最新版/human_all_anno.Rdata"
load(loadDataPath)
loadDataPath <- "E:/学习资料存放处/IDmap/注释存放处/8_MySQL_table最新版/rat_all_anno.Rdata"
#allfiles = list.files(getwd())
#for(i in 1:length(allfiles)){
#  print(i)
#  eval(parse(text = paste0("load(","\'",allfiles[i],"\'",")")))
#}
load(loadDataPath)
idmapdb <- dbConnect(SQLite(), dbname="idmap.sqlite")
idmapdb <- dbWriteTable(conn = idmapdb,
name = "rat_anno",
value = head(rat_anno),
overwrite = T,
row.names = FALSE)
idmapdb <- dbWriteTable(conn = idmapdb,
name = "rat_anno",
value = head(allXres),
overwrite = T,
row.names = FALSE)
dbListTables(idmapdb)
dbGetQuery(idmapdb,"select * from rat_anno")
idmapdb <- dbConnect(SQLite(), dbname="idmap.sqlite")
zz <- dbWriteTable(conn = idmapdb,
name = "rat_anno",
value = head(allXres),
overwrite = T,
row.names = FALSE)
dbListTables(idmapdb)
dbGetQuery(idmapdb, 'SELECT * FROM rat_anno LIMIT 5')
dbGetQuery(idmap,"DROP TABLE rat_anno")
## delete table
dbGetQuery(idmapdb,"DROP TABLE rat_anno")
dbListTables(idmapdb)
dbGetQuery(idmapdb,"DROP TABLE tmpRes")
dbListTables(idmapdb)
rm(list=ls())
setwd("E:/GitHub/Demo/IDmapApp/IDmap/")
library(RSQLite)
sqlitePath <- "/data/idmap.sqlite"
loadDataPath <- "E:/学习资料存放处/IDmap/注释存放处/8_MySQL_table最新版/rat_all_anno.Rdata"
load(loadDataPath)
idmapdb <- dbConnect(SQLite(), dbname=sqlitePath)
sqlitePath <- "data/idmap.sqlite"
idmapdb <- dbConnect(SQLite(), dbname=sqlitePath)
idmapdb <- dbConnect(SQLite(), dbname=sqlitePath)
zz <- dbWriteTable(conn = idmapdb,
name = "rat_all_anno",
value = allXres,
overwrite = T,
row.names = FALSE)
dbListTables(idmapdb)
dbDisconnect(idmapdb)
unlink(idmapdb)
rm(list=ls())
setwd("E:/GitHub/Demo/IDmapApp/IDmap/")
setwd("E:/GitHub/Demo/IDmapApp/IDmap/")
library(RSQLite)
sqlitePath <- "data/idmap.sqlite"
loadDataPath <- "E:/学习资料存放处/IDmap/注释存放处/8_MySQL_table最新版/mouse_all_anno.Rdata"
load(loadDataPath)
# Connect to the database
idmapdb <- dbConnect(SQLite(), dbname=sqlitePath)
zz <- dbWriteTable(conn = idmapdb,
name = "mouse_all_anno",
value = allXres,
overwrite = T,
row.names = FALSE)
dbListTables(idmapdb)
dbDisconnect(idmapdb)
rm(list=ls())
setwd("E:/GitHub/Demo/IDmapApp/IDmap/")
library(RSQLite)
sqlitePath <- "data/idmap.sqlite"
loadDataPath <- "E:/学习资料存放处/IDmap/注释存放处/8_MySQL_table最新版/human_all_anno.Rdata"
load(loadDataPath)
# Connect to the database
idmapdb <- dbConnect(SQLite(), dbname=sqlitePath)
zz <- dbWriteTable(conn = idmapdb,
name = "human_all_anno",
value = allXres,
overwrite = T,
row.names = FALSE)
dbListTables(idmapdb)
dbDisconnect(idmapdb)
shiny::runApp()
runApp()
idmapdb <- dbConnect(SQLite(), dbname=sqlitePath)
dbListTables(idmapdb)
dbGetQuery(idmapdb, 'SELECT * FROM human_anno LIMIT 25')
dbGetQuery(idmapdb, 'SELECT * FROM human_all_anno LIMIT 25')
runApp()
runApp()
runApp()
runApp()
?createLink
runApp()
runApp()
createLink <- function(base,val) {
sprintf('<a href="%s" class="btn btn-link" target="_blank" >%s</a>',base,val) ##target="_blank"
}
createLink(paste0("https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=",searchRes$gpl),searchRes$gpl)
library(rigv)
library(igvR)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
runApp()
runApp()
runApp()
