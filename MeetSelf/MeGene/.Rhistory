shiny::runApp('E:/GitHub/Demo/IDmapApp/IDmap')
runApp('E:/GitHub/Demo/IDmapApp/IDmap')
browseVignettes("RMySQL")
library(RMySQL)
browseVignettes("RMySQL")
shiny::runApp('E:/GitHub/Demo/IDmapApp/IDmap')
runApp('E:/GitHub/Demo/IDmapApp/IDmap')
shiny::runApp('E:/GitHub/Demo/MeetSelf/MeGene')
runApp('E:/GitHub/Demo/MeetSelf/MeGene')
runApp('E:/GitHub/Demo/MeetSelf/MeGene')
runApp('E:/GitHub/Demo/MeetSelf/MeGene')
library(data.table)
library(illuminaio)
library(openxlsx)
options(stringsAsFactors = F)
## 读入基因型芯片数据
genotype <- fread("E:\\学习资料存放处\\果壳芯片资料\\genotype.txt")
View(genotype)
geneInfo <- read.xlsx("/data/GeneInfo.xlsx")
getwd()
setwd("E:/GitHub/Demo/MeetSelf/MeGene")
geneInfo <- read.xlsx("/data/GeneInfo.xlsx")
getwd()
library(openxlsx)
runApp()
runApp()
runApp()
geneInfo <- read.xlsx("/data/geneinfo.xlsx")
geneInfo <- read.xlsx("E:/GitHub/Demo/MeetSelf/MeGene/data/geneinfo.xlsx")
experson1 <- genotype[,1:6]
View(experson1)
write.csv(experson1,"testASAGenotype.csv",row.names = F)
getwd
runApp()
runApp()
runApp()
runApp()
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
library(shiny)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
devtools:install_github("rmarkdown", "rstudio")
library(devtools)
devtools:install_github("rmarkdown", "rstudio")
devtools::install_github("rmarkdown", "rstudio")
library(rmarkdown)
library(shiny)
library(data.table)
library(shinydashboard)
ui = dashboardPage(
dashboardHeader(title = "如何上传数据"),
dashboardSidebar(
menuItem("生成数据",tabName = "a")
),
dashboardBody(
tabItems(
tabItem(tabName = "a",
tableOutput("head"),
downloadButton("down1","下载rmarkdown的html报表"))
)
)
)
server <- function(input, output) {
d1 <- reactive({
ID = 1:20
y = rnorm(20)
dat = data.frame(ID,y)
})
output$head <- renderTable({
dat= d1()
head(dat)
})
output$down1 <- downloadHandler(
filename = function() {
paste('Data-summary', Sys.time(), sep = '.', 'html')
},
content = function(file) {
dat = d1()
src <- normalizePath('rmarkdown1.Rmd')
owd <- setwd(tempdir())
on.exit(setwd(owd))
file.copy(src, 'rmarkdown1.Rmd', overwrite = TRUE)
library(rmarkdown)
out <- render('rmarkdown1.Rmd', html_document())
file.rename(out, file)
})
}
shinyApp(ui = ui, server = server)
?includeMarkdown
?file.path
runApp()
runApp()
?includeMarkdown
?rmarkdown::render()
getwd()
tempReport <- file.path("reports/MeGeneReport.Rmd")
tempReport
runApp()
plot(pressure)
runApp()
runApp()
?normalizePath()
tempReport <- file.path("reports/MeGeneReport.Rmd")
?file.copy
cat("file A\n", file = "A")
cat("file B\n", file = "B")
file.append("A", "B")
file.create("A") # (trashing previous)
file.append("A", rep("B", 10))
if(interactive()) file.show("A") # -> the 10 lines from 'B'
file.copy("A", "C")
dir.create("tmp")
file.copy(c("A", "B"), "tmp")
list.files("tmp") # -> "A" and "B"
unlink("tmp", recursive = TRUE)
file.remove("A", "B", "C")
runApp()
runApp('E:/GitHub/Demo/MeetSelf')
runApp('E:/GitHub/Demo/MeetSelf')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.setlocale(locale="C")
runApp()
runApp()
runApp()
?Sys.setlocale
Sys.setlocale(locale="")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
